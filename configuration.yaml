# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

homeassistant: # https://www.home-assistant.io/blog/2015/05/09/utc-time-zone-awareness/
  time_zone: CET # Europe/Berlin without DST adaptations

  # https://www.home-assistant.io/docs/configuration/customizing-devices/
  customize:
    sensor.power_balance:
      # icon: mdi:lightbulb # would override the template sensor icon definition

      # https://community.home-assistant.io/t/how-to-change-icons-colour-of-template-sensor-in-lovelace/107619
      # is ignored, likely due to incomplete installation:
      icon_color: >
        {% set target_charge = states('input_number.target_charge'   )|int(10) %}
        {% set target_dischg = states('input_number.target_discharge')|int(20) %}
        {% set min_balanced = min(target_charge, target_dischg)          - 10  %}
        {% set max_balanced = max(target_charge, target_dischg)          + 10  %}
        {% if   min_balanced       <= this.state|float(0) and this.state|float(0) <= max_balanced       %}
          green
        {% elif min_balanced - 100 <= this.state|float(0) and this.state|float(0) <= max_balanced + 100 %}
          yellow
        {% else %}
          red
        {% endif %}

      # https://community.home-assistant.io/t/change-the-color-of-the-icon-of-a-virtual-sensor-depending-of-the-state/338658/14
      # cannot get this installed, so the following is ignored:
      templates:
        icon_color: 'red'

## https://github.com/andrey-git/home-assistant-custom-ui?tab=readme-ov-file
#customizer:
#  custom_ui: local

script:   !include scripts.yaml
scene:    !include scenes.yaml
# template: !include template.yaml


template:
# https://www.home-assistant.io/integrations/template/
# https://smarthomebastler.at/template-sensor-neu-und-effektiv-anlegen/
# https://smarthomeyourself.de/wiki/homeassistant/template-sensoren-von-der-alten-sensor-integration-auf-die-neue-template-integration-umstellen/

  - sensor:
      - name: power_balance
        unique_id: power_balance_id
        # friendly_name: "Power Balance" # " at distribution box"
        device_class: power
        unit_of_measurement: 'W'
        # WTH, variables not supported here - see https://community.home-assistant.io/t/support-variables-in-template-sensors/249082
        availability: >
          {{ is_number(states('sensor.shelly3em_channel_a_power')) and
             is_number(states('sensor.shelly3em_channel_b_power')) and
             is_number(states('sensor.shelly3em_channel_c_power')) }}
        state: >
          {{ states('sensor.shelly3em_channel_a_power')|float +
             states('sensor.shelly3em_channel_b_power')|float +
             states('sensor.shelly3em_channel_c_power')|float }}
        # https://community.home-assistant.io/t/template-sensor-using-this-variable/420200/4
        # https://www.home-assistant.io/integrations/switch.template/#change-the-icon
        icon: >
          {% set target_charge = states('input_number.target_charge'   )|int(10) %}
          {% set target_dischg = states('input_number.target_discharge')|int(20) %}
          {% set min = min(target_charge, target_dischg)                   - 10  %}
          {% set max = max(target_charge, target_dischg)                   + 10  %}
          {% if min <= this.state|float(0) and this.state|float(0) <= max        %}
            mdi:scale-balance
          {% else %}
            mdi:scale-unbalanced
          {% endif %}

      # derived values needed for Riemann sums (integrations)

      - name: power_consumption
        unique_id: power_consumption_id
        # friendly_name: "Power Consumption"
        device_class: power
        unit_of_measurement: 'W'
        # WTH, variables not supported here - see https://community.home-assistant.io/t/support-variables-in-template-sensors/249082
        availability: >
          {{ is_number(states('sensor.shelly3em_channel_a_power')) and
             is_number(states('sensor.shelly3em_channel_b_power')) and
             is_number(states('sensor.shelly3em_channel_c_power')) }}
        state: >
          {{ max(0, states('sensor.shelly3em_channel_a_power')|float +
                    states('sensor.shelly3em_channel_b_power')|float +
                    states('sensor.shelly3em_channel_c_power')|float +
                    states('sensor.power_production')|float(0) -
                    states('sensor.power_charge'    )|float(0) +
                    states('sensor.power_discharge' )|float(0)) }}
        # not using states('sensor.power_balance'), which partially avoids inconsistencies with earlier values of powA/powB/powC
        # using "max(0, ...)" as workaround for consumption appearing negative because charging jumped high while balance has not been updated yet
        # despite availability, still need to use '|float' to convert the type, see https://github.com/home-assistant/home-assistant.io/issues/30992

      - name: power_import  # on power_balance > 0
        unique_id: power_import_id
        # friendly_name: "Power Import"
        device_class: power
        unit_of_measurement: 'W'
        availability: "{{ is_number(states('sensor.power_balance')) }}"
        state: >
          {{ max(0, states('sensor.power_balance')|float) }}

      - name: power_export  # on power_balance < 0
        unique_id: power_export_id
        # friendly_name: "Power Export"
        device_class: power
        unit_of_measurement: 'W'
        availability: "{{ is_number(states('sensor.power_balance')) }}"
        state: >
          {{ max(0, 0 - states('sensor.power_balance')|float) }}

      - name: power_own_use  # of PV power
        unique_id: power_own_use_id
        # friendly_name: "Power Own Use (self-consumption)"
        device_class: power
        unit_of_measurement: 'W'
        availability: "{{ is_number(states('sensor.power_consumption')) and
                          is_number(states('sensor.power_production' )) }}"
        state: >
          {{ min(states('sensor.power_consumption')|float, states('sensor.power_production')|float) }}
        # may go wrong if consumption and production sensor values are not consistent in time

# https://community.home-assistant.io/t/use-last-value-instead-of-unknown/614331/4
# stable sensors using last known value of base sensor if current value is unknown

  - sensor:
      - name: power_production
        unique_id: power_production
        # friendly_name: "Power Production"  # - stable
        state: '{{ trigger.to_state.state }}'
        device_class: power
        unit_of_measurement: W
    trigger:
      - platform: state
        entity_id: sensor.power_production_unstable
        not_to:
          - unknown
          - unavailable

  - sensor:
      - name: power_charge
        unique_id: power_charge
        # friendly_name: "Charge power"  # - stable
        state: '{{ trigger.to_state.state }}'
        device_class: power
        unit_of_measurement: W
    trigger:
      - platform: state
        entity_id: sensor.power_charge_unstable
        not_to:
          - unknown
          - unavailable

  - sensor:
      - name: power_discharge
        unique_id: power_discharge
        # friendly_name: "Discharge power"  # - stable
        state: '{{ trigger.to_state.state }}'
        device_class: power
        unit_of_measurement: W
    trigger:
      - platform: state
        entity_id: sensor.power_discharge_unstable
        not_to:
          - unknown
          - unavailable

  - sensor:
    - name: "Battery SoC"  # using the Coulomb Counting method
      unique_id: battery_soc_id
      state_class: measurement
      # WTH, variables not supported here - see https://community.home-assistant.io/t/support-variables-in-template-sensors/249082
      availability: "{{ is_number(states('sensor.energy_charge_sum'   )) and
                        is_number(states('sensor.energy_discharge_sum')) and
                        states('input_number.last_charge_balance')|float(0) != -999999 }}"
      state: >
        {% set charge_sum = states('sensor.energy_charge_sum'   )|float %}
        {% set dischg_sum = states('sensor.energy_discharge_sum')|float %}
        {% set efficiency = states('input_number.storage_efficiency')|float %}
        {% set last_bal   = states('input_number.last_charge_balance')  %}
        {% set capacity   = states('input_number.battery_capacity')|int %}
        {{ ((last_bal|float + ((efficiency * charge_sum - dischg_sum) * 1000)) / capacity * 100)|round(1) }}
      device_class: battery
      unit_of_measurement: "%"
    # icon: mdi:battery-medium  # using automatic icon instead

# prefer using MQTT for Shelly Plus 1PM input because Shelly integration only reports changes of at least 5%
# report 'unknown' or 'unavailable' (value from the Shelly integration) if both sources do not yield a number
mqtt:
  sensor:
      # reports the absolute value, or 0 if abs(value) < 0.9 because inverter drags ~0.7 W on standby
    - name: power_production_unstable
      unique_id: power_production_unstable
      # friendly_name: "Power production - stateless"
      state_topic: "pv1/status/switch:0"
      value_template: >-
        {% set val1 = value_json['apower'] %}
        {% set val2 = states('sensor.pv1_power') %}
        {% set val = val1 if is_number(val1) else val2 %}
        {{ (val|abs if val|abs >= 0.9 else 0) if is_number(val) else val }}
      # https://community.home-assistant.io/t/absolute-value-math/255232
      # need to use is_number() - see https://github.com/home-assistant/home-assistant.io/issues/30992
      unit_of_measurement: W
      device_class: power
      state_class: measurement

      # reports max(0, value)
      # HLG-600H drags 3.4 W on standby
    - name: power_charge_unstable  # beware: after quick reload, it can take 30+ seconds to recover from 'unknown'
      unique_id: power_charge_unstable
      # friendly_name: "Charge power - stateless"
      state_topic: "pm1/status/switch:0"
      value_template: >-
        {% set val1 = value_json['apower'] %}
        {% set val2 = states('sensor.pm1_power') %}
        {% set val = val1 if is_number(val1) else val2 %}
        {{ max(0, val) if is_number(val) else val }}
      unit_of_measurement: W
      device_class: power
      state_class: measurement

      # reports 0 if value < 0.5 to suppress flicker on standby
    - name: power_discharge_unstable
      unique_id: power_discharge_unstable
      # friendly_name: "Discharge power - stateless"
      state_topic: "pm2/status/switch:0"
      value_template: >-
        {% set val1 = value_json['apower'] %}
        {% set val2 = states('sensor.pm2_power') %}
        {% set val = val1 if is_number(val1) else val2 %}
        {{ (val if val >= 0.5 else 0) if is_number(val) else val }}
      unit_of_measurement: W
      device_class: power
      state_class: measurement

    - name: battery_voltage
      unique_id: battery_voltage
      # friendly_name: "Battery voltage"  # - stateless
      state_topic: "dtu/116181851168/1/voltage"
      unit_of_measurement: V

# sensor: !include sensor.yaml
sensor:

    # beware that adding needless derived sensors would be inefficient, see
    # https://www.shelly-support.eu/forum/thread/8977-shelly-3em-phasen-saldieren-in-home-assistant/?postID=218747#post218747

# - platform: template # https://www.home-assistant.io/integrations/template/
#   sensors:
#
#     # workaround for former issue with power production sensor, leading to yields unavailable untility_metervalue with unknown meaturement unit
#     energy0_production_hourly:
#       friendly_name: "Energy Production Hourly (workaround)"
#       device_class: energy
#       unit_of_measurement: 'kWh'
#       value_template: >-
#         {{ states('sensor.energy_consumption_hourly')|float(0) - states('sensor.energy_balance_hourly')|float(0) }}
#
#     # workaround for energy export data not always available
#     energy0_export_hourly:
#       friendly_name: "Energy Export Hourly (workaround)"
#       device_class: energy
#       unit_of_measurement: 'kWh'
#       value_template: >-
#         {{ states('sensor.energy_import_hourly')|float(0) - states('sensor.energy_balance_hourly')|float(0) }}

  # https://www.home-assistant.io/integrations/integration/
  # Riemann sums of power values (W) yielding energy (kWh)
  # need to restart HA for modifications of this list to become effective

  - name: energy_balance_sum
    source: sensor.power_balance
    platform: integration
    unit_prefix: k
    round: 3  # number of digits after comma on output (reading the sum value)
    method: left

  - name: energy_import_sum
    source: sensor.power_import
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  - name: energy_export_sum
    source: sensor.power_export
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  - name: energy_consumption_sum
    source: sensor.power_consumption
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  - name: energy_production_sum
    source: sensor.power_production
    # no need to use float(0) here - see https://github.com/home-assistant/home-assistant.io/issues/30992
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  - name: energy_charge_sum
    source: sensor.power_charge
    # no need to use float(0) here - see https://github.com/home-assistant/home-assistant.io/issues/30992
    platform: integration
    unit_prefix: k
    # The Home battery storage setting at https://homeassistant.local:8123/config/energy/dashboard
    # gives wrong warning: The following entities do not have the expected device class: sensor.energy_charge_sum
    round: 3
    method: left

  - name: energy_discharge_sum
    source: sensor.power_discharge
    # no need to use float(0) here - see https://github.com/home-assistant/home-assistant.io/issues/30992
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  - name: energy_own_use_sum
    source: sensor.power_own_use
    platform: integration
    unit_prefix: k
    round: 3
    method: left

  # Riemann sums of power values (W) yielding energy (Ws)

  - name: power_consumption_sum
    source: sensor.power_consumption
    platform: integration
    unit_time: s  # leads to wrong warning, see https://github.com/home-assistant/core/issues/107223
    round: 2
    method: left

  - name: power_production_sum
    source: sensor.power_production
    platform: integration
    unit_time: s  # leads to wrong warning, see https://github.com/home-assistant/core/issues/107223
    round: 2
    method: left

  - name: power_charge_sum
    source: sensor.power_charge
    platform: integration
    unit_time: s  # leads to wrong warning, see https://github.com/home-assistant/core/issues/107223
    round: 2
    method: left

  - name: power_discharge_sum
    source: sensor.power_discharge
    platform: integration
    unit_time: s  # leads to wrong warning, see https://github.com/home-assistant/core/issues/107223
    round: 2
    method: left

utility_meter: # https://www.home-assistant.io/integrations/utility_meter/
# energy accumulators that are reset per hour, day, month, or year
# need to restart HA for modifications of this list to become effective

  energy_balance_hourly:
    name: Energy Balance Hourly
    source: sensor.energy_balance_sum
    net_consumption: true
    cycle: hourly
  energy_balance_daily:
    name: Energy Balance Daily
    source: sensor.energy_balance_sum
    net_consumption: true
    cycle: daily
  energy_balance_monthly:
    name: Energy Balance Monthly
    source: sensor.energy_balance_sum
    net_consumption: true
    cycle: monthly
  energy_balance_yearly:
    name: Energy Balance Yearly
    source: sensor.energy_balance_sum
    net_consumption: true
    cycle: yearly

  energy_import_hourly:
    name: Energy Import Hourly
    source: sensor.energy_import_sum
    cycle: hourly
  energy_import_daily:
    name: Energy Import Daily
    source: sensor.energy_import_sum
    cycle: daily
  energy_import_monthly:
    name: Energy Import Monthly
    source: sensor.energy_import_sum
    cycle: monthly
  energy_import_yearly:
    name: Energy Import Yearly
    source: sensor.energy_import_sum
    cycle: yearly

  energy_export_hourly:
    name: Energy Export Hourly
    source: sensor.energy_export_sum
    cycle: hourly
  energy_export_daily:
    name: Energy Export Daily
    source: sensor.energy_export_sum
    cycle: daily
  energy_export_monthly:
    name: Energy Export Monthly
    source: sensor.energy_export_sum
    cycle: monthly
  energy_export_yearly:
    name: Energy Export Yearly
    source: sensor.energy_export_sum
    cycle: yearly

  energy_consumption_hourly:
    name: Energy Consumption Hourly
    source: sensor.energy_consumption_sum
    cycle: hourly
  energy_consumption_daily:
    name: Energy Consumption Daily
    source: sensor.energy_consumption_sum
    cycle: daily
  energy_consumption_monthly:
    name: Energy Consumption Monthly
    source: sensor.energy_consumption_sum
    cycle: monthly
  energy_consumption_yearly:
    name: Energy Consumption Yearly
    source: sensor.energy_consumption_sum
    cycle: yearly

  energy_production_hourly:
    name: Energy Production Hourly  # Statistic id is derived from this: sensor.energy_production_hourly
    source: sensor.energy_production_sum
    net_consumption: true
    cycle: hourly
  energy_production_daily:
    name: Energy Production Daily
    source: sensor.energy_production_sum
    net_consumption: true
    cycle: daily
  energy_production_monthly:
    name: Energy Production Monthly
    source: sensor.energy_production_sum
    net_consumption: true
    cycle: monthly
  energy_production_yearly:
    name: Energy Production Yearly
    source: sensor.energy_production_sum
    net_consumption: true
    cycle: yearly

  energy_charge_hourly:
    name: Energy Charge Hourly
    source: sensor.energy_charge_sum
    net_consumption: true
    cycle: hourly
  energy_charge_daily:
    name: Energy Charge Daily
    source: sensor.energy_charge_sum
    net_consumption: true
    cycle: daily
  energy_charge_monthly:
    name: Energy Charge Monthly
    source: sensor.energy_charge_sum
    net_consumption: true
    cycle: monthly
  energy_charge_yearly:
    name: Energy Charge Yearly
    source: sensor.energy_charge_sum
    net_consumption: true
    cycle: yearly

  energy_discharge_hourly:
    name: Energy Discharge Hourly
    source: sensor.energy_discharge_sum
    net_consumption: true
    cycle: hourly
  energy_discharge_daily:
    name: Energy Discharge Daily
    source: sensor.energy_discharge_sum
    net_consumption: true
    cycle: daily
  energy_discharge_monthly:
    name: Energy Discharge Monthly
    source: sensor.energy_discharge_sum
    net_consumption: true
    cycle: monthly
  energy_discharge_yearly:
    name: Energy Discharge Yearly
    source: sensor.energy_discharge_sum
    net_consumption: true
    cycle: yearly

  energy_own_use_hourly:
    name: Energy Own_Use Hourly
    source: sensor.energy_own_use_sum
    net_consumption: true
    cycle: hourly
  energy_own_use_daily:
    name: Energy Own_Use Daily
    source: sensor.energy_own_use_sum
    net_consumption: true
    cycle: daily
  energy_own_use_monthly:
    name: Energy Own_Use Monthly
    source: sensor.energy_own_use_sum
    net_consumption: true
    cycle: monthly
  energy_own_use_yearly:
    name: Energy Own_Use Yearly
    source: sensor.energy_own_use_sum
    net_consumption: true
    cycle: yearly

  # used to generate load and PV profile:
  energy_consumption_minutely:
    name: Energy Consumption Minutely
    source: sensor.power_consumption_sum
    cron: "* * * * *"
  energy_production_minutely:
    name: Energy Production Minutely
    source: sensor.power_production_sum
    cron: "* * * * *"


# (ab-)using input_number for defining global constants
# https://community.home-assistant.io/t/create-a-constant/15686/21
  storage_efficiency:  # overall storage efficiency: charging, storing, and discharging = AC output / AC input
    initial: 0.80  # TODO update according to more precise measurement
    min:  0.60
    max:  1.00
    step: 0.01
    icon: mdi:battery-sync-outline
  battery_capacity:  # nominal capacity in Wh
    initial: 1320  # TODO update according to more precise measurement
    min: 1000
    max: 2600
    step: 10
    icon: mdi:battery-sync-outline

  last_voltage_at_rest:  # battery voltage on SoC update at rest, not having been (dis)charged for a while
    initial: 0
    min:  0
    max: 60
  last_soc_at_rest:  # battery SoC on SoC update at rest
    initial: 0
    min: 0
    max: 100

  empty_battery:
    initial: 23.1
    min: 0
    max: 100
  low_battery:
    initial: 24.3
    min: 0
    max: 100
  near_battery: # nearly full (after charge)
    initial: 26.9
    min: 0
    max: 100
  full_battery:
    initial: 28.9
    min: 0
    max: 100

# (ab-)using input_{number,text} for remembering value in automation
# https://community.home-assistant.io/t/why-the-heck-dont-we-have-global-variables/219671/86
# https://community.home-assistant.io/t/remember-a-state-value-and-recall-it-later/35337/4
# alternative would be: https://github.com/enkama/hass-variables
  last_charge_balance: # when measuring stable battery voltage, in Wh
    name: Last Balance Charge vs. Discharge
    initial: -999999  # workaround for not being able to use 'unknown'
    min: -999999
    max: +999999
    mode: box

  last_dis_charge_sum: # when updating battery SoC, in kWs
    name: Last Charge + Discharge sum
    initial: 0  # workaround for not being able to use 'unknown'
    min: 0
    max: +999999
    mode: box

  power_balance_avg:
    name: Power Balance Rolling Average
    initial: 0
    min: -999999
    max: +999999
    mode: box

input_text:
  battery_status:  # set by power_data_to_file automation, avoiding introduction of further sensor
    name: Battery status

notify: # https://www.home-assistant.io/integrations/file/

  - name: power_data
    platform: file
    filename: power.csv
    # timestamp: true
    services:

  - name: energy_data
    platform: file
    filename: energy.csv

  - name: profile_data
    platform: file
    filename: profile.csv

shell_command: # https://www.home-assistant.io/integrations/shell_command/  "When using templates, shell_command runs in a more secure environment ..."
# changes require HA restart, otherwise:  Error executing script. Service not found for call_service at pos N: Unable to find service shell_command.XYZ

# https://community.home-assistant.io/t/file-notification-component-any-way-to-dynamically-create-file-name/113062/11
  rename_power_by_date:   "mv -n power.csv   {{ (as_timestamp(now()) - 60) | timestamp_custom('power_%Y-%m-%d.csv') }}"
  rename_energy_by_year:  "mv -n energy.csv  {{ (as_timestamp(now()) - 60) | timestamp_custom('energy_%Y.csv') }}"
  rename_profile_by_year: "mv -n profile.csv {{ (as_timestamp(now()) - 60) | timestamp_custom('profile_%Y.csv') }}"

# failed attempts to append msg to profile without line break (newline) at msg end:
# append_to_profile:       echo -n >>profile.csv msg  # does nothing if 'msg' is replaced by parameter '{{msg}}'
# append_to_profile:       touch {{msg}}.csv          # test command - this correctly expands '{{msg}}' to 'test'

# automation: !include automations.yaml
automation:

  # at the end of each day, split and name power output file per day
  - id: run_rename_power_by_date
    initial_state: true
    trigger:
      - platform: time
        at: '23:59:59'
    action:
      - service: shell_command.rename_power_by_date

  # at the end of each year, split and name energy output file per year
  - id: run_rename_energy_by_year
    initial_state: true
    trigger:
      - platform: time
        at: '23:59:59'
    condition:
      - condition: template
        value_template: "{{ now().month == 12 and now().day == 31 }}"
    action:
      - service: shell_command.rename_energy_by_year

  # at the end of each year, split and name profile output file per year
  - id: run_rename_profile_by_year
    initial_state: true
    trigger:
      - platform: time
        at: '23:59:59'
    condition:
      - condition: template
        value_template: "{{ now().month == 12 and now().day == 31 }}"
    action:
      - service: shell_command.rename_profile_by_year


  # generate state output per second with power consumption, production, charge, discharge, and per each of the three phases
  - id: power_data_to_file
    initial_state: true
    trigger:
      - platform: time_pattern
        seconds: "/1"
    action:
      - variables: # https://www.home-assistant.io/docs/scripts/#variables
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          prod: "{{ states('sensor.power_production'         ) }}"
          chrg: "{{ states('sensor.power_charge'             ) }}"
          disc: "{{ states('sensor.power_discharge'          ) }}"
          powA: "{{ states('sensor.shelly3em_channel_a_power') }}"
          powB: "{{ states('sensor.shelly3em_channel_b_power') }}"
          powC: "{{ states('sensor.shelly3em_channel_c_power') }}"
        # not using 'bal' nor 'con' in order to (partially) avoid inconsistencies with earlier values of powA/powB/powC
        # bal : "{{ states('sensor.power_balance'            ) }}"
        # con : "{{ states('sensor.power_consumption'        ) }}"
          balance: "{{ powA|float(0) + powB|float(0) + powC|float(0)           }}"
          cons   : "{{ balance + prod|float(0) - chrg|float(0) + disc|float(0) }}"
          unav: "{{ not is_number(powA) or not is_number(powB) or not is_number(powC) }}"
      # warn on unavailable per-channel power values
      - if: "{{ unav }}"
        then:
          # https://www.home-assistant.io/integrations/system_log/
          - service: system_log.write
            data:
              message: "{{ 'per-channel value(s) of power_balance not available:' }} {{ powA }} {{ powB }} {{ powC }}"
              logger: home
              level: warning
      # warn on consumption appearing non-positive (typically when charging bounced up while balance has not been updated yet)
      - if: "{{ not unav and cons <= 0 }}"
        then:
          - service: system_log.write
            data:
              message: "{{ 'power_consumption is not positive:' }} {{ cons }}"
              logger: home
              level: warning
      - service: notify.power_data
        data_template: # time zone: %z
          message: "{{ '%s,%7.2f,%s,%s,%s,%7.2f,%7.2f,%7.2f,%s' %
                       (time, '    ?  ' if unav else cons,
                        ('%5.1f' % prod if prod != 0 else '    0') if is_number(prod) else '  ?  ',
                        ('%5.1f' % chrg if chrg != 0 else '    0') if is_number(chrg) else '  ?  ',
                        ('%5.1f' % disc if disc != 0 else '    0') if is_number(disc) else '  ?  ',
                        powA, powB, powC,
                        'per-channel powers unavailable' if unav else 'consumption non-positive' if cons <= 0 else '') }}"
      - variables:
          volt        : "{{ states('sensor.battery_voltage'           )          }}"
          soc         : "{{ states('sensor.battery_soc'               )          }}"
          volt_at_rest: "{{ states('input_number.last_voltage_at_rest')|float(0) }}"
          soc_at_rest : "{{ states('input_number.last_soc_at_rest'    )|float(0) }}"
          batt_status : "{{ '%s,%s,%s' %
                            ('%4.1f' % volt if is_number(volt) else ' ?  ',
                             '%4.1f' % soc  if is_number(soc ) else ' ?  ',
                             'charging' if is_number(chrg) and chrg != 0 else
                             'disc_ing' if is_number(disc) and disc != 0 else
                             ' at rest' if volt|float(-1) == volt_at_rest and
                                           soc |float(-1) ==  soc_at_rest else
                            'previously at rest: %.1f V %.1f %%' % (volt_at_rest, soc_at_rest)) }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.battery_status
          value: "{{ batt_status }}"

      - service: light.turn_on
        target:
          entity_id: light.power_import
        data:
          brightness_pct: "{{ min(100, max(0, (balance - 30) * 100 / 200)) }}"  # TODO replace '30' by discharge target + 10
          # rgb_color: [ 255, 0, 0 ]  # is ignored for icon color
          # rgb_color: [ 255 if balance < 0 else 0, 0, 255 if balance >= 0 else 0]
      - service: light.turn_on
        target:
          entity_id: light.power_export
        data:
          brightness_pct: "{{ min(100, max(0, (0 - balance) * 100 / 200)) }}"  # TODO replace '0' by charge target - 10

  # generate statistics output per hour with energy consumption, production, charge, discharge, own use, balance, import, and export
  - id: energy_data_to_file
    trigger:
      - platform: time_pattern
        minutes: 59
        seconds: 59
    action:
      - variables:
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          cons: "{{ 1000 * states('sensor.energy_consumption_hourly')|float }}"
          prod: "{{ 1000 * states('sensor.energy_production_hourly' )|float }}"
          own:  "{{ 1000 * states('sensor.energy_own_use_hourly'    )|float }}"
          bal:  "{{ 1000 * states('sensor.energy_balance_hourly'    )|float }}"
          imp:  "{{ 1000 * states('sensor.energy_import_hourly'     )|float }}"
          exp:  "{{ 1000 * states('sensor.energy_export_hourly'     )|float }}"
          # unavailable values of above variables intentionally lead to missing output line

          chrg: "{{ 1000 * states('sensor.energy_charge_hourly'     )|float }}"
          disc: "{{ 1000 * states('sensor.energy_discharge_hourly'  )|float }}"
          volt   : "{{ states('sensor.battery_voltage') }}"
          soc    : "{{ states('sensor.battery_soc')     }}"
      - service: notify.energy_data
        data_template:
          message: "{{ '%s,%4d,%4d,%4d,%4d,%4d,%4d%s' %
                       (time, cons, prod, own, bal, imp, exp,
                        ',%s,%s,%s' % (
                          '%4d'   % chrg if is_number(chrg) else '   ?',
                          '%4d'   % disc if is_number(disc) else '   ?',
                          states('input_text.battery_status'))
                        if is_number(chrg) or is_number(disc) or is_number(volt) else '') }}"

  # generate load and PV profile with one line per minute containing average power values (W)
  - id: profile_data_to_file
    initial_state: true
    trigger:
      - platform: time_pattern
        seconds: 59
#       seconds: '*'
    action:
# failed attempts to append msg to profile without line break (newline) at msg end:
#     - service: shell_command.append_to_profile
#       data:
#         msg: "{{ 'test' }}"
      - variables:
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          cons: "{{ states('sensor.energy_consumption_minutely') }}"
          prod: "{{ states('sensor.energy_production_minutely' ) }}"
      # unavailable consumption value intentionally leads to missing output line
      - condition: "{{ is_number(cons) }}"
      - service: notify.profile_data
        data_template:
          message: "{{ time }},{{ '%7.2f' % (cons / 60) }},{{
                                  '%7.2f' % (prod / 60) if is_number(prod) else '      ?' }}"

  - id: adapt_soc_at_rest
    initial_state: true
    trigger:
      # must initialize after HA restart; make sure to do when battery voltage has become available
      # https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
      - platform: numeric_state
        entity_id:  sensor.power_balance  # anything that changes often
        value_template: "{{ states('sensor.battery_voltage')|float(0) }}"
        above: 0  # gets triggered also on quick reload
        # inferior time-based alternative, requring uptime integration: https://www.home-assistant.io/integrations/uptime/
        ## https://community.home-assistant.io/t/uptime-in-days-hours-and-minutes/180916/40
        #value_template: "{{ as_timestamp(now()) - as_timestamp(states('sensor.uptime')) }}"
        #above: 1 # at least one second after HA restart

      # for determinining the battery SoC using the Open Circuit Voltage Method (OCV),
      # continue only when battery has not been charged or discharged for a while
      # battery may take some 3 minutes to recover stable voltage after being (dis)charged
      # the official value-based trigger does not work reliably:
    # - platform: numeric_state
    #   entity_id:
    #      - sensor.power_charge
    #      - sensor.power_discharge
    #   value_template: "{{ states('sensor.power_charge'   )|float(1) +
    #                       states('sensor.power_discharge')|float(1) }}"
    #   below: 1
    #   for: "00:03:00"
      # as a workaround, do the (dis)charge activity check ourselves:
      - platform: time_pattern
        minutes: "/3"
    action:
      - variables:
          chg_pow : "{{ states('sensor.power_charge'             ) }}"
          dis_pow : "{{ states('sensor.power_discharge'          ) }}"
          chg_sum : "{{ states('sensor.power_charge_sum'         ) }}"
          dis_sum : "{{ states('sensor.power_discharge_sum'      ) }}"
      - condition : "{{ chg_pow|float(1) == 0 and dis_pow|float(1) == 0 and
                        is_number(chg_sum) and is_number(dis_sum ) }}"
      - variables:
          old_sum : "{{ states('input_number.last_dis_charge_sum') }}"
          new_sum : "{{ (chg_sum + dis_sum) / 1000                 }}"
      - service: input_number.set_value
        data:
          entity_id: input_number.last_dis_charge_sum
          value: "{{ new_sum }}"
      - condition: "{{ new_sum|round(5) == old_sum|round(5) or old_sum == 0 }}"  # adapting also on HA restart
      # end of workaround, doing the (dis)charge activity check ourselves

      - variables:
          charge_sum: "{{ states('sensor.energy_charge_sum'   ) }}"
          dischg_sum: "{{ states('sensor.energy_discharge_sum') }}"
          voltage   : "{{ states('sensor.battery_voltage'     ) }}"
      - condition: "{{ is_number(charge_sum) and is_number(dischg_sum) and is_number(voltage) }}"
      - variables:
          old_bal:  "{{ states('input_number.last_charge_balance') }}"
          old_soc:  "{{ states('sensor.battery_soc'              ) }}"
          # https://community.home-assistant.io/t/noob-needs-help-to-convert-voltage-to-percentage/355021/12
          # https://docs.google.com/spreadsheets/d/1SyzKUZ5_KxLB6megSLTXYv_1LlbcFqE4gxMgK8SrMvs/
          # below voltage curve values assume 24 V LFP battery but are adapted via the nominalVoltage constant
          soc: >
            {% set nominalVoltage =                        24 %}
            {% set volt = voltage|float / nominalVoltage * 24 %}
            {% set curve = [
                { "volt": 20.0, "percent":  0 },
                { "volt": 22.4, "percent":  5 },
                { "volt": 24.0, "percent":  9.5 },
                { "volt": 25.2, "percent": 14 },
                { "volt": 25.6, "percent": 20 },
                { "volt": 25.8, "percent": 30 },
                { "volt": 26.0, "percent": 40 },
                { "volt": 26.1, "percent": 50 },
                { "volt": 26.2, "percent": 60 },
                { "volt": 26.4, "percent": 70 },
                { "volt": 26.6, "percent": 80 },
                { "volt": 26.8, "percent": 90 },
                { "volt": 27.0, "percent": 99 },
                { "volt": 27.6, "percent": 99.5 },
                { "volt": 29.2, "percent":100 }
              ]
            %}
            {% set minVolt = curve[0               ].volt %}
            {% set maxVolt = curve[curve|length - 1].volt %}
            {% if volt < minVolt %}
              0
            {% elif volt >= maxVolt %}
              100
            {% else %}
              {% for i in range(curve|length - 1) %}
                {% set v1 = curve[i    ].volt     %}
                {% set p1 = curve[i    ].percent  %}
                {% set v2 = curve[i + 1].volt     %}
                {% set p2 = curve[i + 1].percent  %}
                {% if v1 <= volt and volt < v2    %}
                  {% set percent = p1 + (p2 - p1) * ((volt - v1) / (v2 - v1)) %}
                    {{ percent|round(0) if percent < 99 else percent|round(1) }}
                {% endif %}
              {% endfor %}
            {% endif %}
      # prepare data for the Coulomb Counting method
      # https://www.powertechsystems.eu/home/tech-corner/lithium-ion-state-of-charge-soc-measurement/
          capacity  : "{{ states('input_number.battery_capacity'  )|int }}"
          efficiency: "{{ states('input_number.storage_efficiency')|float }}"
          offset    : "{{ (efficiency * charge_sum - dischg_sum) * 1000 }}"
          new_bal   : "{{ soc / 100 * capacity - offset }}"
      - if: "{{ new_bal|round(3) != old_bal|float(999999)|round(3) }}"
        then:
          - service: input_number.set_value
            data:
              entity_id: input_number.last_charge_balance
              value: "{{ new_bal }}"
          - delay: "00:00:01"  # give sensor.battery_soc a little time to update itself
          - service: system_log.write
            data:
              message: "{{ 'battery SoC adapted from ' }}{{ old_soc }}{{ ' to ' }}{{ states('sensor.battery_soc') }}{{ ' %; voltage: ' }}{{ voltage }}{{
                        ' V; charge_balance updated from ' }}{{ old_bal|round(2) if is_number(old_bal) else old_bal }}{{
                                                    ' to ' }}{{ new_bal|round(2) if is_number(new_bal) else new_bal }}{{ ' Wh ' }}"
              logger: battery
              level: critical  # unfortunately, cannot use 'debug' here as this level is not shown by default
      - service: input_number.set_value
        data:
          entity_id: input_number.last_voltage_at_rest
          value: "{{ voltage }}"
      - service: input_number.set_value
        data:
          entity_id: input_number.last_soc_at_rest
          value: "{{ states('sensor.battery_soc') }}"
